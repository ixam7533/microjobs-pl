// scripts/check-user-status.js
const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkUserStatus() {
  try {
    // Sprawd≈∫ u≈ºytkownika bibleversememory7@gmail.com
    const user = await prisma.user.findUnique({
      where: { email: 'bibleversememory7@gmail.com' },
      include: {
        subscriptions: true
      }
    })

    if (user) {
      console.log('‚úÖ Znaleziono u≈ºytkownika:', user.email)
      console.log('üîπ ID:', user.id)
      console.log('üîπ Subskrypcja:', user.subscriptionType || 'BRAK')
      console.log('üîπ Koniec subskrypcji:', user.subscriptionEnd?.toLocaleString('pl-PL') || 'BRAK')
      console.log('üîπ Wykorzystane promowania:', user.promotionsUsed)
      console.log('üîπ Limit promowa≈Ñ:', user.promotionsLimit)
      
      if (user.subscriptions.length > 0) {
        console.log('\nüìã Historia subskrypcji:')
        user.subscriptions.forEach((sub, index) => {
          console.log(`  ${index + 1}. ${sub.type} - ${sub.status} (${sub.startDate.toLocaleDateString('pl-PL')} - ${sub.endDate.toLocaleDateString('pl-PL')})`)
        })
      }
    } else {
      console.log('‚ùå Nie znaleziono u≈ºytkownika bibleversememory7@gmail.com')
    }

    // Sprawd≈∫ wszystkich u≈ºytkownik√≥w z subskrypcjami
    const usersWithSubs = await prisma.user.findMany({
      where: {
        OR: [
          { subscriptionType: { not: null } },
          { subscriptionEnd: { not: null } }
        ]
      }
    })

    console.log(`\nüìä U≈ºytkownicy z subskrypcjami (${usersWithSubs.length}):`)
    usersWithSubs.forEach(user => {
      console.log(`  ‚Ä¢ ${user.email} - ${user.subscriptionType} (do: ${user.subscriptionEnd?.toLocaleDateString('pl-PL') || 'brak daty'})`)
    })

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkUserStatus()
